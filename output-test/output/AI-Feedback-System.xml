This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: node_modules/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
client/eslint.config.js
client/index.html
client/package.json
client/public/vite.svg
client/src/App.tsx
client/src/assets/react.svg
client/src/components/BackButton.tsx
client/src/components/BasicButton.tsx
client/src/components/BasicHeading.tsx
client/src/components/basicList/BasicList.tsx
client/src/components/basicList/ListButton.tsx
client/src/components/basicList/ListHeader.tsx
client/src/components/basicList/ListItem.tsx
client/src/components/BasicSearchBar.tsx
client/src/components/FilterButton.tsx
client/src/components/Footer.tsx
client/src/components/Header.tsx
client/src/components/SubmissionForm.tsx
client/src/context/GitHubContext.ts
client/src/context/GitHubProvider.tsx
client/src/context/types.ts
client/src/context/useGitHub.ts
client/src/context/UserContext.ts
client/src/context/UserProvider.tsx
client/src/context/useUser.ts
client/src/hooks/useFilteredList.ts
client/src/index.css
client/src/layouts/MainLayout.tsx
client/src/main.tsx
client/src/pages/assignmentPage/AssignmentsPage.tsx
client/src/pages/assignmentPage/GetCSVFileButton.tsx
client/src/pages/loginPage/LoginButton.tsx
client/src/pages/loginPage/LoginPage.tsx
client/src/pages/orgPage/OrgsPage.tsx
client/src/pages/repoDetailPage/RepoDetailPage.tsx
client/src/pages/repoDetailPage/Subtext.tsx
client/src/pages/repoPage/ReposPage.tsx
client/src/pages/SpecificUserSubmissionScreen.tsx
client/src/pages/SubmissionPage.tsx
client/src/types/StudentSubmissionInfo.ts
client/src/utils/generateCSVFromOrg.ts
client/src/vite-env.d.ts
client/tailwind.config.js
client/tsconfig.app.json
client/tsconfig.json
client/tsconfig.node.json
client/vite.config.ts
docs/ARCHITECTURE.md
docs/EPICS.md
docs/PROJECT_PLAN.md
docs/REQUIREMENTS.md
et --hard d8f68da
README.md
repomix-test.ts
repomix.js
repomix.ts
server/.dockerignore
server/controllers/authController.ts
server/controllers/githubController.ts
server/Dockerfile
server/index.ts
server/middlewares/isAuthenticated.ts
server/package.json
server/routes/authRoutes.ts
server/routes/githubRoutes.ts
server/services/github/githubService.ts
server/services/github/octokitClient.ts
server/tsconfig.json
server/utils/githubUtils.ts
server/utils/passport.ts
shared/githubInterfaces.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Node modules (for both client and server)
node_modules/
client/node_modules/
server/node_modules/

# Build outputs
dist/
client/dist/
server/dist/
dist-ssr
*.local

# Environment variables
.env.*
client/.env.*
client/.env
client/.env.vault
server/.env.*
server/.env
server/.env.vault


# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Logs
*.log

# System files
.DS_Store

# Output and test files
output/
</file>

<file path="client/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="client/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GitHub Classroom Analyzer</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="client/package.json">
{
  "name": "afs",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "@tailwindcss/vite": "^4.1.7",
    "axios": "^1.9.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.5.3",
    "tailwindcss": "^4.1.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/node": "^22.15.18",
    "@types/react": "^19.1.4",
    "@types/react-dom": "^19.1.5",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5",
    "vite-tsconfig-paths": "^5.1.4"
  }
}
</file>

<file path="client/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="client/src/App.tsx">
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import MainLayout from "./layouts/MainLayout";
import LoginPage from "./pages/loginPage/LoginPage";
import OrgsPage from "./pages/orgPage/OrgsPage";
import AssignmentsPage from "./pages/assignmentPage/AssignmentsPage";
import { UserProvider } from "./context/UserProvider";
import RepoDetailPage from "./pages/repoDetailPage/RepoDetailPage";
import { GitHubProvider } from "./context/GitHubProvider";
import ReposPage from "./pages/repoPage/ReposPage";
import SpecificUserSubmissionScreen from "./pages/SpecificUserSubmissionScreen";

function App() {
  return (
    <GitHubProvider>
      <UserProvider>
        <Router>
          <Routes>
            <Route path="/" element={<MainLayout />}>
              <Route index element={<LoginPage />} />
              <Route path="/orgs" element={<OrgsPage />} />
              <Route
                path="/orgs/:orgName/assignments"
                element={<AssignmentsPage />}
              />
              <Route
                path="/orgs/:orgName/assignments/:assignmentName/repos"
                element={<ReposPage />}
              />
              <Route
                path="/orgs/:orgName/assignments/:assignmentName/repos/:repoId"
                element={<RepoDetailPage />}
              />
              <Route
                path="/orgs/:orgName/assignments/:assignmentName/submission"
                element={<SpecificUserSubmissionScreen />}
              />
            </Route>
          </Routes>
        </Router>
      </UserProvider>
    </GitHubProvider>
  );
}

export default App;
</file>

<file path="client/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="client/src/components/BackButton.tsx">
import { useNavigate } from "react-router-dom";
import { BiArrowBack } from "react-icons/bi";

type BackButtonProps = {
  to: string;
};

export default function BackButton({ to }: BackButtonProps) {
  const navigate = useNavigate();

  return (
    <button
      onClick={() => navigate(to)}
      className="flex items-center text-gray-600 round"
    >
      <BiArrowBack className="mr-2" size={20} />
    </button>
  );
}
</file>

<file path="client/src/components/BasicButton.tsx">
interface BasicButtonProps {
  text: string;
  onClick: () => void;
}

export default function BasicButton({ text, onClick }: BasicButtonProps) {
  return (
    <button onClick={onClick} className="flex items-center justify-between border border-[#D9D9D9] px-6 py-3 h-[40px] rounded-full w-fit min-w-[95px] gap-2 bg-[#1D1B20] hover:opacity-90 text-white">
      <span className="text-xs sm:text-sm">{text}</span>
    </button>
  )
}
</file>

<file path="client/src/components/BasicHeading.tsx">
interface BasicHeadingProps {
    heading: string;
    styling?: string;
}

export default function BasicHeading({ heading, styling = "" }: BasicHeadingProps) {
  return (
    <h1 className={`text-[29px] font-bold ${styling}`}>{heading}</h1>
  )
}
</file>

<file path="client/src/components/basicList/BasicList.tsx">
import { useNavigate } from "react-router-dom";
import ListHeader from "./ListHeader";
import ListItem from "./ListItem";
import type { StudentSubmissionInfo } from "../../types/StudentSubmissionInfo";
import type {
  AssignmentInfo,
  OrgInfo,
  RepoInfo,
} from "@shared/githubInterfaces";

type BasicListProps =
  | { type: "org"; items: OrgInfo[]; isLoading: boolean }
  | {
      type: "assignment";
      items: AssignmentInfo[];
      orgName: string;
      isLoading: boolean;
    }
  | {
      type: "repo";
      items: RepoInfo[];
      orgName: string;
      assignmentName: string;
      isLoading: boolean;
    }
  | { type: "submission"; items: StudentSubmissionInfo[]; isLoading: boolean };

export default function BasicList(props: BasicListProps) {
  const navigate = useNavigate();

  const isEmpty = Array.isArray(props.items) && props.items.length === 0;

  return (
    <div className="flex flex-col">
      <ListHeader type={props.type} />

      {props.isLoading && <div className="text-gray-500 p-4">Loading...</div>}

      {!props.isLoading && isEmpty && (
        <div className="text-gray-500 p-4">No items found.</div>
      )}
      {!props.isLoading &&
        !isEmpty &&
        props.items.map((item, index) => {
          const key = `${props.type}-${index}`;

          switch (props.type) {
            case "org":
              return (
                <ListItem
                  key={key}
                  type="org"
                  data={item as OrgInfo}
                  onClick={() =>
                    navigate(`/orgs/${(item as OrgInfo).name}/assignments`)
                  }
                />
              );

            case "assignment":
              return (
                <ListItem
                  key={key}
                  type="assignment"
                  data={item as AssignmentInfo}
                  onClick={() =>
                    navigate(
                      `/orgs/${props.orgName}/assignments/${encodeURIComponent(
                        (item as AssignmentInfo).name
                      )}/repos`
                    )
                  }
                />
              );

            case "repo":
              return (
                <ListItem
                  key={key}
                  type="repo"
                  data={item as RepoInfo}
                  onClick={() =>
                    navigate(
                      `/orgs/${props.orgName}/assignments/${encodeURIComponent(
                        props.assignmentName
                      )}/repos/${(item as RepoInfo).id}`
                    )
                  }
                />
              );

            case "submission":
              return (
                <ListItem
                  key={key}
                  type="submission"
                  data={item as StudentSubmissionInfo}
                />
              );
          }
        })}
    </div>
  );
}
</file>

<file path="client/src/components/basicList/ListButton.tsx">
interface ListButtonProps {
  text: string;
}

export default function ListButton({ text }: ListButtonProps) {
  return (
    <button className="h-8 px-4 text-xs sm:text-sm bg-[#1D1B20] text-white rounded-full w-fit min-w-[100px]">
        {text}
    </button>
  )
}
</file>

<file path="client/src/components/basicList/ListHeader.tsx">
interface ListHeaderProps {
  type: "repo" | "submission" | "assignment" | "org";
}

export default function ListHeader({ type }: ListHeaderProps) {
  if (type === "org") {
    return (
      <div className="grid grid-cols-[40px_1fr_1fr] h-[40px] bg-[#EADDFF] px-4 gap-2 items-center text-sm font-medium border rounded border-b border-l border-r border-[#D9D9D9]">
        <div />
        <p className="text-left">Organization</p>
        <p className="text-left">Description</p>
      </div>
    );
  }

  if (type === "assignment") {
    return (
      <div className="grid grid-cols-[40px_1fr_1fr_1fr] h-[40px] bg-[#EADDFF] px-4 gap-2 items-center text-sm font-medium border rounded border-b border-l border-r border-[#D9D9D9]">
        <div />
        <p className="text-center">Assignment name</p>
        <p className="text-center">Students</p>
        <p className="text-center">Last updated</p>
      </div>
    );
  }

  if (type === "repo") {
    return (
      <div className="grid grid-cols-[40px_1fr_1fr_1fr] h-[40px] bg-[#EADDFF] px-4 gap-2 items-center text-sm font-medium border rounded border-b border-l border-r border-[#D9D9D9]">
        <div />
        <p className="text-left">Repository name</p>
        <p className="text-center">Students</p>
        <p className="text-left">Last updated</p>
      </div>
    );
  }

  if (type === "submission") {
    return (
      <div className="grid grid-cols-[40px_1fr_1fr_1fr] h-[40px] bg-[#EADDFF] px-4 gap-2 items-center text-sm font-medium border rounded border-b border-l border-r border-[#D9D9D9]">
        <div />
        <p className="text-center">Student</p>
        <p className="text-center">Submission status</p>
        <p className="text-center">Grade</p>
      </div>
    );
  }
}
</file>

<file path="client/src/components/basicList/ListItem.tsx">
import type { StudentSubmissionInfo } from "../../types/StudentSubmissionInfo";
import type {
  AssignmentInfo,
  OrgInfo,
  RepoInfo,
} from "@shared/githubInterfaces";

type ListItemProps =
  | { type: "org"; data: OrgInfo; onClick?: () => void }
  | { type: "assignment"; data: AssignmentInfo; onClick?: () => void }
  | { type: "repo"; data: RepoInfo; onClick?: () => void }
  | { type: "submission"; data: StudentSubmissionInfo; onClick?: () => void };

export default function ListItem(props: ListItemProps) {
  const commonClass =
    "h-[56px] px-4 gap-2 items-center text-sm hover:bg-gray-100 cursor-pointer border rounded border-[#D9D9D9] overflow-y-auto max-h-[calc(100vh-240px)]";

  let content;
  let className = "";

  switch (props.type) {
    case "org": {
      const org = props.data;
      className = `grid grid-cols-[40px_1fr_1fr] ${commonClass}`;
      content = (
        <>
          <img
            src={org.avatarUrl}
            alt={org.name}
            className="w-6 h-6 rounded-full"
          />
          <p className="text-left">{org.name}</p>
          <p className="text-left">{org.description || "No description"}</p>
        </>
      );
      break;
    }

    case "assignment": {
      const assignment = props.data;
      className = `grid grid-cols-[40px_1fr_1fr_1fr] ${commonClass}`;
      content = (
        <>
          <div className="w-6 h-6" />
          <p className="text-center">{assignment.name}</p>
          <p className="text-center">{assignment.submissionCount}</p>
          <p className="text-center">{assignment.lastUpdated}</p>
        </>
      );
      break;
    }

    case "repo": {
      const repo = props.data;
      const avatar = repo.collaborators[0]?.avatarUrl || "";
      const students = repo.collaborators[0].name;
      className = `grid grid-cols-[40px_1fr_1fr_1fr] ${commonClass}`;
      content = (
        <>
          <img src={avatar} alt="repo" className="w-6 h-6 rounded-full" />
          <p className="text-left">{repo.name}</p>
          <p className="text-center">{students}</p>
          <p className="text-left">
            {new Date(repo.updatedAt).toLocaleString()}
          </p>
        </>
      );
      break;
    }

    case "submission": {
      const submission = props.data;
      className = `grid grid-cols-[40px_1fr_1fr_1fr_auto] ${commonClass} text-xs sm:text-sm`;
      content = (
        <>
          <img
            src={submission.studentProfilePicture}
            alt="student"
            className="w-6 h-6 rounded-full"
          />
          <p className="text-center">{submission.studentName}</p>
          <p className="text-center">{submission.submissionStatus}</p>
          <p className="text-center">{submission.currentGrade}</p>
        </>
      );
      break;
    }
  }

  return (
    <div className={className} onClick={props.onClick}>
      {content}
    </div>
  );
}
</file>

<file path="client/src/components/BasicSearchBar.tsx">
import { BiSearch } from "react-icons/bi";

interface BasicSearchBarProps {
  value: string;
  onChange: (value: string) => void;
}

export default function BasicSearchBar({
  value,
  onChange,
}: BasicSearchBarProps) {
  return (
    <div className="w-[360px] h-[56px] border border-[#D9D9D9] rounded-full flex items-center px-4">
      <input
        type="text"
        placeholder="Search by repository name or class"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        className="flex-grow bg-transparent outline-none text-gray-800 placeholder-gray-500"
      />
      <BiSearch />
    </div>
  );
}
</file>

<file path="client/src/components/FilterButton.tsx">
import { useState } from "react";
import { BiSolidDownArrow } from "react-icons/bi";

interface FilterButtonProps {
  buttonText: string;
  items: string[];
}

export default function FilterButton({ buttonText, items }: FilterButtonProps) {
  const [isOpen, setIsOpen] = useState(false);
  const toggleDropdown = () => setIsOpen((prev) => !prev);

  return (
    <div className="relative inline-block">
      <button
        onClick={toggleDropdown}
        className="flex items-center justify-between border border-[#D9D9D9] px-4 py-3 rounded-full w-fit min-w-[95px] gap-2 h-[56px]"
      >
        <span className="text-xs sm:text-sm text-[#1E1E1E]">{buttonText}</span>
        <BiSolidDownArrow
          className={`w-3 h-3 transition-transform duration-200 ${
            isOpen ? "" : "rotate-180"
          }`}
        />
      </button>
      {isOpen && (
        <ul className="absolute mt-2 w-full bg-white border border-[#D9D9D9] rounded-md shadow-md z-10">
          {items.map((item, index) => (
            <li
              key={index}
              className="px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm text-[#1E1E1E]"
              onClick={() => {
                setIsOpen(false);
              }}
            >
              {item}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
</file>

<file path="client/src/components/Footer.tsx">
export default function Footer() {
  return (
    <footer className="w-full h-[99px] py-4 border-t border-[#D9D9D9] text-center text-lg text-gray-500">
      Footer
    </footer>
  )
}
</file>

<file path="client/src/components/Header.tsx">
interface HeaderProps {
  loggedIn: boolean;
  onClick: () => void;
}

export default function Header({ onClick, loggedIn }: HeaderProps) {
  const text = loggedIn ? "Logout" : "Login";

  return (
    <header className="top-0 left-0 w-full h-[99px] border-b border-[#D9D9D9] px-8 py-8 flex items-center justify-between">
      <div className="flex-shrink-0">
        {/* the logo needs to be added or deleted fully if it's not needed */}
        <img src="/logo.svg" alt="Logo" className="h-full" />
      </div>
      <div className="flex items-center gap-6">
        <span className="text-lg text-[#1E1E1E]">Languages</span>
        <button
          onClick={onClick}
          className="bg-[#1D1B20] w-[148px] text-white text-lg px-4 py-2 rounded-full hover:opacity-90"
        >
          {text}
        </button>
      </div>
    </header>
  );
}
</file>

<file path="client/src/components/SubmissionForm.tsx">

</file>

<file path="client/src/context/GitHubContext.ts">
import { createContext } from "react";
import type { GitHubContextType } from "./types";

const GitHubContext = createContext<GitHubContextType | null>(null);
export default GitHubContext;
</file>

<file path="client/src/context/GitHubProvider.tsx">
import { useMemo } from "react";
import axios from "axios";
import GitHubContext from "./GitHubContext";
import type { GitHubContextType } from "./types";
import type {
  AssignmentInfo,
  OrgInfo,
  RepoInfo,
} from "@shared/githubInterfaces";

const baseUrl = import.meta.env.VITE_API_BASE_URL;

export const GitHubProvider = ({ children }: { children: React.ReactNode }) => {
  const getOrganizations = async (): Promise<OrgInfo[]> => {
    const res = await axios.get(`${baseUrl}/api/github/orgs`, {
      withCredentials: true,
    });
    return res.data;
  };

  const getAssignments = async (orgName: string): Promise<AssignmentInfo[]> => {
    const res = await axios.get(
      `${baseUrl}/api/github/orgs/${orgName}/assignments`,
      {
        withCredentials: true,
      }
    );
    return res.data;
  };

  const getRepos = async (
    orgName: string,
    assignmentName = ""
  ): Promise<RepoInfo[]> => {
    const res = await axios.get(
      `${baseUrl}/api/github/orgs/${orgName}/assignments/${assignmentName}/repos`,
      { withCredentials: true }
    );
    return res.data;
  };

  const getAllOrganizationData = async (org: string) => {
  const res = await axios.get(`${baseUrl}/api/github/org-report`, {
    withCredentials: true,
    params: { org },
  });
  return res.data; 
  };

  const contextValue: GitHubContextType = useMemo(
    () => ({
      getOrganizations,
      getRepos,
      getAllOrganizationData,
      getAssignments,
    }),
    []
  );

  return (
    <GitHubContext.Provider value={contextValue}>
      {children}
    </GitHubContext.Provider>
  );
};
</file>

<file path="client/src/context/types.ts">
import type {
  OrgInfo,
  AssignmentInfo,
  RepoInfo,
  User,
} from "@shared/githubInterfaces";

export interface GitHubContextType {
  getOrganizations: () => Promise<OrgInfo[]>;
  getAssignments: (orgLogin: string) => Promise<AssignmentInfo[]>;
  getRepos: (org: string, assignmentPrefix?: string) => Promise<RepoInfo[]>;
  getAllOrganizationData: (org: string) => Promise<any>;
}

export interface UserContextType {
  user: User | null;
  isLogin: boolean;
  refreshUser: () => Promise<void>;
  logout: () => Promise<void>;
  login: () => string;
}
</file>

<file path="client/src/context/useGitHub.ts">
import { useContext } from "react";
import GitHubContext from "./GitHubContext";
import type { GitHubContextType } from "./types";

export const useGitHub = (): GitHubContextType => {
  const context = useContext(GitHubContext);

  if (!context) {
    throw new Error("useGitHub must be used within a GitHubProvider");
  }
  return context;
};
</file>

<file path="client/src/context/UserContext.ts">
// Declares the context object only
import { createContext } from "react";
import type { UserContextType } from "../types/UserInfo";

const UserContext = createContext<UserContextType | undefined>(undefined);
export default UserContext;
</file>

<file path="client/src/context/UserProvider.tsx">
// Provides state and logic (data + functions)
import { useEffect, useState, useMemo } from "react";
import axios from "axios";
import UserContext from "./UserContext";
import type { UserContextType } from "./types";
import type { User } from "@shared/githubInterfaces";

const baseUrl = import.meta.env.VITE_API_BASE_URL;

export const UserProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);

  const refreshUser = async () => {
    try {
      const res = await axios.get(`${baseUrl}/api/auth/getCurrentUser`, {
        withCredentials: true,
      });
      setUser(res.data.user || null);
    } catch {
      setUser(null);
    }
  };

  const login = () => {
    return `${baseUrl}/api/auth/login`;
  };

  const logout = async () => {
    await axios.get(`${baseUrl}/api/auth/logout`, { withCredentials: true });
    setUser(null);
  };

  useEffect(() => {
    refreshUser();
  }, []);

  const contextValue: UserContextType = useMemo(
    () => ({
      user,
      isLogin: !!user,
      refreshUser,
      logout,
      login,
    }),
    [user]
  );

  return (
    <UserContext.Provider value={contextValue}>{children}</UserContext.Provider>
  );
};
</file>

<file path="client/src/context/useUser.ts">
// Exports the custom hook for using the context
import { useContext } from "react";
import UserContext from "./UserContext";
import type { UserContextType } from "../types/UserInfo";

export const useUser = (): UserContextType => {
  const context = useContext(UserContext);

  if (!context) {
    throw new Error("useUser must be used within a UserProvider");
  }
  return context;
};
</file>

<file path="client/src/hooks/useFilteredList.ts">
import { useMemo } from "react";

export function useFilteredList<T>(
  list: T[] = [],
  searchTerm: string,
  predicate: (item: T, searchTerm: string) => boolean
): T[] {
  return useMemo(() => {
    return list.filter((item) => predicate(item, searchTerm));
  }, [list, searchTerm, predicate]);
}
</file>

<file path="client/src/index.css">
@import "tailwindcss";
</file>

<file path="client/src/layouts/MainLayout.tsx">
import { Outlet, useNavigate, useLocation } from "react-router-dom";
import { useEffect } from "react";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { useUser } from "../context/useUser";

export default function MainLayout() {
  const { user, isLogin, refreshUser, logout, login } = useUser();

  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const checkAndRedirect = async () => {
      await refreshUser?.();
      if (user && location.pathname === "/") {
        navigate("/orgs");
      }
    };
    checkAndRedirect();
  }, [refreshUser, navigate, user, location.pathname]);

  const handleHeaderButtonClick = async () => {
    if (isLogin) {
      await logout?.();
      navigate("/");
    } else {
      const loginUrl = login?.();
      if (loginUrl) {
        window.location.href = loginUrl;
      }
    }
  };

  return (
    <div className="flex flex-col min-h-screen">
      <Header loggedIn={!!isLogin} onClick={handleHeaderButtonClick} />
      <main className="flex-1 flex justify-center items-start">
        <div className="w-full max-w-screen-xl">
          <Outlet />
        </div>
      </main>
      <Footer />
    </div>
  );
}
</file>

<file path="client/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="client/src/pages/assignmentPage/AssignmentsPage.tsx">
import BasicHeading from "../../components/BasicHeading";
import BasicList from "../../components/basicList/BasicList";
import FilterButton from "../../components/FilterButton";
import BasicSearchBar from "../../components/BasicSearchBar";
import { useEffect, useState } from "react";
import { useGitHub } from "../../context/useGitHub";
import { useParams } from "react-router-dom";
import type { AssignmentInfo } from "@shared/githubInterfaces";
import { useFilteredList } from "../../hooks/useFilteredList";
import BackButton from "../../components/BackButton";
import GetCSVFileButton from "./GetCSVFileButton";

export default function AssignmentsPage() {
  const { orgName } = useParams<{ orgName: string }>();
  const [assignments, setAssignments] = useState<AssignmentInfo[]>([]);
  const github = useGitHub();
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);

  const filteredAssignments = useFilteredList(
    assignments,
    searchTerm,
    (a, term) => a.name.toLowerCase().includes(term.toLowerCase())
  );

  useEffect(() => {
    if (orgName) {
      github
        .getAssignments(orgName)
        .then(setAssignments)
        .catch(console.error)
        .finally(() => setLoading(false));
    }
  }, [orgName, github]);

  console.log("assignments:", assignments);
  return (
    <div className="flex flex-col space-y-20 p-4 md:p-12">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="flex space-x-4">
            <BackButton to="/orgs" />
            <BasicHeading heading={`Assignments in ${orgName}`} />
          </div>
          <div className="flex space-x-4">
            <GetCSVFileButton text="Get CSV Report" orgLogin={orgName}/>
            <FilterButton buttonText="Sort By" items={["Recent", "Old"]} />
          </div>
        </div>
        <BasicSearchBar value={searchTerm} onChange={setSearchTerm} />
      </div>
      <BasicList
        type="assignment"
        items={filteredAssignments}
        orgName={orgName!}
        isLoading={loading}
      />
    </div>
  );
}
</file>

<file path="client/src/pages/assignmentPage/GetCSVFileButton.tsx">
import { generateCSVFromOrg } from "../../utils/generateCSVFromOrg";
import { useGitHub } from "../../context/useGitHub";

interface GetCSVFileButtonProps {
  text: string;
  orgLogin: string | undefined;
}

export default function GetCSVFileButton({ text, orgLogin }: GetCSVFileButtonProps) {
  const github = useGitHub();
  const handleClick = async () => {
    if (!orgLogin) return;

    try {
      const data = await github.getAllOrganizationData(orgLogin);
      generateCSVFromOrg(data);
    } catch (error) {
      console.error("Error generating CSV:", error);
    }
  };

  return (
    <button onClick={handleClick} className="flex items-center justify-between border border-[#D9D9D9] px-6 py-3 h-[40px] rounded-full w-fit min-w-[95px] gap-2 bg-[#1D1B20] hover:opacity-90 text-white">
      <span className="text-xs sm:text-sm">{text}</span>
    </button>
  )
}
</file>

<file path="client/src/pages/loginPage/LoginButton.tsx">
import { FaGithub } from 'react-icons/fa';

interface LoginButtonProps {
  onClick: () => void;
}

export default function LoginButton({ onClick }: LoginButtonProps) {
  return (
    <button onClick={onClick} className="flex items-center bg-[#1D1B20] gap-3 px-16 py-5 hover:opacity-90 text-white text-lg rounded-full">
      <FaGithub className="w-6 h-6" />
      <span>Sign In With GitHub</span>
    </button> 
  )
}
</file>

<file path="client/src/pages/loginPage/LoginPage.tsx">
import BasicHeading from "../../components/BasicHeading";
import { useEffect } from "react";
import LoginButton from "./LoginButton";
import { useNavigate } from "react-router-dom";
import { useUser } from "../../context/useUser";

export default function LoginPage() {
  const { isLogin, login } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    if (isLogin) navigate("/orgs");
  }, [isLogin, navigate]);

  const handleLogin = () => {
    const loginUrl = login?.();
    if (loginUrl) {
      window.location.href = loginUrl;
    }
  };

  return (
    <div className="flex flex-col gap-20">
      <div className="flex flex-col items-center gap-2 px-4">
        <BasicHeading
          styling="text-center"
          heading="Login to GitHub Classroom Analyzer"
        />
        <p className="text-[20px] text-center">
          Sign in with GitHub to access your classroom repositories and analyze
          student submissions.
        </p>
      </div>
      <div className="flex flex-col items-center gap-10 px-4">
        <LoginButton onClick={handleLogin} />
        <p className="text-[16px] text-center">
          Only GitHub Classroom instructors can access this tool.
        </p>
      </div>
    </div>
  );
}
</file>

<file path="client/src/pages/orgPage/OrgsPage.tsx">
import { useEffect, useState } from "react";
import { useGitHub } from "../../context/useGitHub";
import type { OrgInfo } from "@shared/githubInterfaces";
import BasicHeading from "../../components/BasicHeading";
import BasicList from "../../components/basicList/BasicList";
import BasicSearchBar from "../../components/BasicSearchBar";
import { useFilteredList } from "../../hooks/useFilteredList";

export default function OrgsPage() {
  const [orgs, setOrgs] = useState<OrgInfo[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);
  const github = useGitHub();

  useEffect(() => {
    github
      .getOrganizations()
      .then(setOrgs)
      .catch(console.error)
      .finally(() => setLoading(false));
  }, [github]);

  const filteredOrgs = useFilteredList(orgs, searchTerm, (org, term) =>
    org.name.toLowerCase().includes(term.toLowerCase())
  );

  console.log("orgs:", orgs);

  return (
    <div className="flex flex-col space-y-10 p-4 md:p-12">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <BasicHeading heading="Your Organizations" />
        <BasicSearchBar value={searchTerm} onChange={setSearchTerm} />
      </div>
      <BasicList type="org" items={filteredOrgs} isLoading={loading} />
    </div>
  );
}
</file>

<file path="client/src/pages/repoDetailPage/RepoDetailPage.tsx">
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import BackButton from "../../components/BackButton";
import BasicHeading from "../../components/BasicHeading";
import BasicList from "../../components/basicList/BasicList";
import FilterButton from "../../components/FilterButton";
import BasicSearchBar from "../../components/BasicSearchBar";
import BasicButton from "../../components/BasicButton";
import Subtext from "./Subtext";
import { useFilteredList } from "../../hooks/useFilteredList";
import type { StudentSubmissionInfo } from "../../types/StudentSubmissionInfo";

// Mocked data until backend is connected
const mockStudentSubmissions: Record<string, StudentSubmissionInfo[]> = {
  "1": [
    {
      id: "1",
      studentProfilePicture: "https://example.com/profile1.jpg",
      studentName: "Alice Johnson",
      submissionStatus: "Analyzed",
      currentGrade: "4",
      submissionTime: "2 hours ago",
    },
    {
      id: "2",
      studentProfilePicture: "https://example.com/profile2.jpg",
      studentName: "Bob Smith",
      submissionStatus: "Missing",
      currentGrade: "N/A",
      submissionTime: "N/A",
    },
  ],
};

export default function RepoDetailPage() {
  const { orgName, assignmentName, id } = useParams<{
    orgName: string;
    assignmentName: string;
    id: string;
  }>();

  const [repoName, setRepoName] = useState("Repository Name");
  const [submissions, setSubmissions] = useState<StudentSubmissionInfo[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);
  const [lastRunTime, setLastRunTime] = useState("");

  const filteredSubmissions = useFilteredList(
    submissions,
    searchTerm,
    (submission, term) =>
      submission.studentName.toLowerCase().includes(term.toLowerCase())
  );

  useEffect(() => {
    if (id) {
      // Mock fetch
      const fetchedSubmissions = mockStudentSubmissions[id] ?? [];
      setSubmissions(fetchedSubmissions);
      setLoading(false);

      // Mock last analysis run
      const now = new Date();
      setLastRunTime(
        `${now.getHours()}:${now
          .getMinutes()
          .toString()
          .padStart(2, "0")} ${now.getDate()}.${
          now.getMonth() + 1
        }.${now.getFullYear()}`
      );
    }
  }, [id]);

  const gradedCount = submissions.filter(
    (s) => s.submissionStatus.toLowerCase() === "analyzed"
  ).length;

  const handleClick = (action: string) => {
    console.log(`Clicked ${action}`);
  };

  return (
    <div className="flex flex-col space-y-20 p-4 md:p-12">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="flex space-x-4">
            <BackButton
              to={`/orgs/${orgName}/assignments/${assignmentName}/repos`}
            />
            <BasicHeading heading={repoName} />
          </div>
          <div className="flex flex-col md:flex-row gap-2">
            <BasicButton
              onClick={() => handleClick("Re-run")}
              text="Re-run Analysis"
            />
            <BasicButton
              onClick={() => handleClick("Analyze Selected")}
              text="Analyze Selected"
            />
          </div>
        </div>

        <div>
          <Subtext
            text={`${gradedCount}/${submissions.length} submissions graded.`}
          />
          <Subtext text={`Last analysis run ${lastRunTime}.`} />
        </div>

        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="flex space-x-4">
            <BasicSearchBar value={searchTerm} onChange={setSearchTerm} />
            <FilterButton
              buttonText="Filter"
              items={["Analyzed", "Error", "Missing"]}
            />
          </div>
          <div className="flex space-x-4">
            <BasicButton
              onClick={() => handleClick("CSV")}
              text="Get CSV Report"
            />
            <BasicButton
              onClick={() => handleClick("Analytics")}
              text="See Analytics Page"
            />
          </div>
        </div>
      </div>

      <BasicList
        type="submission"
        items={filteredSubmissions}
        isLoading={loading}
      />
    </div>
  );
}
</file>

<file path="client/src/pages/repoDetailPage/Subtext.tsx">
interface SubtextProps {
  text: string;
}

export default function Subtext({ text }: SubtextProps) {
  return (
    <div>
        <p className="text-[16px]">{text}</p>
    </div>
  )
}
</file>

<file path="client/src/pages/repoPage/ReposPage.tsx">
import BasicHeading from "../../components/BasicHeading";
import BasicList from "../../components/basicList/BasicList";
import FilterButton from "../../components/FilterButton";
import BasicSearchBar from "../../components/BasicSearchBar";
import type { RepoInfo } from "@shared/githubInterfaces";
import { useEffect, useState } from "react";
import { useGitHub } from "../../context/useGitHub";
import { useParams } from "react-router-dom";
import { useFilteredList } from "../../hooks/useFilteredList";
import BackButton from "../../components/BackButton";
import BasicButton from "../../components/BasicButton";

export default function ReposPage() {
  const { orgName } = useParams<{ orgName: string }>();
  const { assignmentName } = useParams<{ assignmentName: string }>();
  const github = useGitHub();
  const [repos, setRepos] = useState<RepoInfo[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);

  const filteredRepos = useFilteredList(repos ?? [], searchTerm, (repo, term) =>
    repo.name.toLowerCase().includes(term.toLowerCase())
  );

  useEffect(() => {
    if (orgName) {
      github
        .getRepos(orgName, assignmentName)
        .then(setRepos)
        .catch(console.error)
        .finally(() => setLoading(false));
    }
  }, [orgName, assignmentName, github]);

  const handleClick = (action: string) => {
    console.log(`Clicked ${action}`);
  };

  console.log("repos", repos);
  return (
    <div className="flex flex-col space-y-10 p-4 md:p-12">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="flex space-x-4">
            <BackButton to={`/orgs/${orgName}/assignments`} />
            <BasicHeading heading={`Repositories in ${assignmentName}`} />
          </div>
          <div className="flex space-x-4">
            <BasicSearchBar value={searchTerm} onChange={setSearchTerm} />
            <FilterButton buttonText="Sort By" items={["Recent", "Old"]} />
          </div>
        </div>
        <div className="flex flex-col md:flex-row md:items-center md:justify-end gap-4">
          <BasicButton
            onClick={() => handleClick("Run Analysis")}
            text="Run Analysis"
          />
          <BasicButton
            onClick={() => handleClick("Run Analysis")}
            text="View Summary"
          />
        </div>
      </div>

      <BasicList
        type="repo"
        items={filteredRepos}
        orgName={orgName!}
        assignmentName={assignmentName!}
        isLoading={loading}
      />
    </div>
  );
}
</file>

<file path="client/src/pages/SpecificUserSubmissionScreen.tsx">
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

interface SubmissionData {
  name: string;
  feedback: string;
  date: string;
  fileName: string;
  grade: string;
}

const SpecificUserSubmissionScreen: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [data, setData] = useState<SubmissionData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Edit-tilat
  const [isEditing, setIsEditing] = useState(false);
  const [editedFeedback, setEditedFeedback] = useState('');

  useEffect(() => {
    setLoading(true);
    setError(null);
    setTimeout(() => {
      if (!id) {
        setError('ID puuttuu');
        setLoading(false);
        return;
      }
      setData({
        name: `Matti Meikäläinen`,
        feedback: '',
        date: new Date().toLocaleDateString('fi-FI') + ' ' + new Date().toLocaleTimeString('fi-FI', { hour: '2-digit', minute: '2-digit' }),
        fileName: `tehtava${id}.zip`,
        grade: '3/5',
      });
      setLoading(false);
    }, 800);
  }, [id]);

  if (loading) {
    return <div className="text-center mt-10">Ladataan...</div>;
  }
  if (error) {
    return <div className="text-center mt-10 text-red-600">{error}</div>;
  }
  if (!data) {
    return null;
  }

  // Edit-painikkeen toiminta
  const handleEditClick = () => {
    setIsEditing(true);
    setEditedFeedback(data.feedback);
  };

  const handleSave = () => {
    setData({ ...data, feedback: editedFeedback });
    setIsEditing(false);
  };

  const handleCancel = () => {
    setIsEditing(false);
    setEditedFeedback('');
  };

  // Download-painikkeen toiminta (simuloitu PDF)
  const handleDownload = () => {
    const element = document.createElement('a');
    const file = new Blob([data.feedback], { type: 'application/pdf' });
    element.href = URL.createObjectURL(file);
    element.download = data.fileName.replace(/\.zip$/, '.pdf');
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  // Edit Grade -painikkeen toiminta
  const handleEditGrade = () => {
    const uusiArvosana = window.prompt('Syötä uusi arvosana (esim. 4/5):', data.grade);
    if (uusiArvosana && uusiArvosana.trim() !== '') {
      setData({ ...data, grade: uusiArvosana });
    }
  };

  // Delete-painikkeen toiminta
  const handleDelete = () => {
    if (window.confirm('Haluatko varmasti poistaa koko palautuksen? Tätä toimintoa ei voi perua.')) {
      navigate(-1);
    }
  };

  return (
    <div className="min-h-screen bg-[#F5F5F5] flex justify-center items-center">
      <div className="max-w-[820px] w-full bg-white rounded-[16px] shadow-lg p-0 sm:p-[60px] py-[48px] border border-[#E0E0E0]">
        <div className="relative w-full h-full flex flex-col items-start">
          <div className="w-full h-full bg-white rounded-none shadow-none px-0 py-0 relative border-none" style={{boxShadow: 'none'}}>
            {/* Ylärivi: tekstit vasemmalle, painikkeet oikealle */}
            <div className="flex flex-row justify-between items-start w-full gap-4 mt-2 mb-2">
              <div className="flex flex-row items-start gap-4">
                <button
                  onClick={() => navigate(-1)}
                  className="p-0 rounded-full text-[32px] font-extrabold text-[#1E1E1E] leading-none border-none bg-transparent hover:bg-gray-100 mt-1"
                  aria-label="Takaisin"
                  style={{fontFamily: 'inherit', border: 'none'}}
                >
                  &#8592;
                </button>
                <div>
                  <h1 className="text-[20px] font-extrabold text-[#1E1E1E] mb-1" style={{fontFamily: 'inherit'}}>Matti Meikäläinen</h1>
                  <div className="text-[#1E1E1E] text-[13px] flex flex-col gap-0.5">
                    <span>Submission time: {data.date}</span>
                    <span>Grade: {data.grade}</span>
                  </div>
                </div>
              </div>
              <div className="flex flex-col gap-4 items-end pr-8">
                <button className="bg-[#1E1E1E] text-white px-6 py-1.5 rounded-full font-medium text-[13px] w-[180px] text-right" style={{boxShadow: 'none', letterSpacing: 0}} onClick={handleDownload}>Download Feedback PDF</button>
                <button className="bg-[#1E1E1E] text-white px-6 py-1.5 rounded-full font-medium text-[13px] w-[180px] text-right" style={{boxShadow: 'none', letterSpacing: 0}} onClick={handleEditGrade}>Edit Grade</button>
                <button className="bg-[#1E1E1E] text-white px-6 py-1.5 rounded-full font-medium text-[13px] w-[180px] text-right" style={{boxShadow: 'none', letterSpacing: 0}} onClick={handleEditClick} disabled={isEditing}>Edit Feedback</button>
              </div>
            </div>
            {/* AI Feedback -laatikko */}
            <div className="pt-6 pb-4">
              <div className="text-[15px] font-semibold text-[#1E1E1E] mb-2">AI Feedback:</div>
              <div className="w-full bg-[#C7C7C7] rounded-[8px] min-h-[120px] flex items-center justify-center text-[#1E1E1E] text-[15px] p-6 border-none" style={{height: 120}}>
                {isEditing ? (
                  <div className="w-full">
                    <textarea
                      className="w-full border rounded p-4 min-h-[80px] bg-white text-[#1E1E1E] text-[15px]"
                      value={editedFeedback}
                      onChange={(e) => setEditedFeedback(e.target.value)}
                    />
                    <div className="mt-2 flex gap-2">
                      <button
                        className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 text-[13px]"
                        onClick={handleSave}
                      >
                        Tallenna
                      </button>
                      <button
                        className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 text-[13px]"
                        onClick={handleCancel}
                      >
                        Peruuta
                      </button>
                    </div>
                  </div>
                ) : (
                  data.feedback ? data.feedback : <span className="text-[#757575]">Highlighted issues, what went well etc etc</span>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SpecificUserSubmissionScreen;
</file>

<file path="client/src/pages/SubmissionPage.tsx">

</file>

<file path="client/src/types/StudentSubmissionInfo.ts">
export interface StudentSubmissionInfo {
  id: string;
  studentProfilePicture: string;
  studentName: string;
  submissionStatus: string;
  currentGrade: string;
  submissionTime: string;
}
</file>

<file path="client/src/utils/generateCSVFromOrg.ts">
/* 
FORMAT OF CSV DOCUMENT:

Overview of Student Grades and Submissions

Name          Assignment 1      Assignment 2     Assignment 3     Grade Average 
Alice Park        5                 N/A               2              2.33
Micheal Devon     4                 3                 5               4
Willie Wonka      Error             N/A               5              1.66

// maybe later something about students who have done nothing?
*/

function downloadCSV(csvContent: string, filename: string = "report.csv") {
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.setAttribute("href", url);
  link.setAttribute("download", filename);
  link.style.visibility = "hidden";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

type OrgReport = {
  org: string;
  assignments: string[];
  submissions: {
    student: string;
    grades: Record<string, number | string | null>; 
  }[];
};

export function generateCSVFromOrg(orgData: OrgReport) {
  // get all assignments under the organization
  const assignmentNames = orgData.assignments;
  const headerRow = ["Username", ...assignmentNames, "Grade Average"]; 

  const csvLines = [
    ["Overview of Student Grades and Submissions"], // title row
    headerRow, // header row
  ];

  for (const submission of orgData.submissions) {
    const { student, grades } = submission;
    const row: (string | number)[] = [student];

    let sum = 0;
    let count = 0;

    for (const assignment of assignmentNames) {
      const grade = grades[assignment];
      if (typeof grade === "number") {
        row.push(grade);
        sum += grade;
        count++;
      } else if (grade === "Error") {
        row.push("Error");
      } else {
        row.push("N/A");
      }
    }

    const average = count > 0 ? (sum / count).toFixed(2) : "N/A";
    row.push(average);
    csvLines.push(row.map(String));
  } 

  const csvContent = csvLines.map((row) => row.join(";")).join("\n");
  downloadCSV(csvContent, `${orgData.org}_assignments_overview.csv`);
}
</file>

<file path="client/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="client/tailwind.config.js">
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}", // adjust this if your files are in different folders
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
</file>

<file path="client/tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@shared/*": ["../shared/*"]
    },

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    "types": ["react", "react-dom"],

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="client/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="client/tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,
    "types": ["node"],

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="client/vite.config.ts">
import { defineConfig } from "vite";
import tailwindcss from "@tailwindcss/vite";
import react from "@vitejs/plugin-react";
import path from "path";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      "@shared": path.resolve(__dirname, "../shared"),
    },
  },
  server: {
    proxy: {
      "/api": {
        target: "http://localhost:5000", // backend server
        changeOrigin: true,
        secure: false,
      },
    },
  },
});
</file>

<file path="docs/ARCHITECTURE.md">
# System Architecture

## Overview

This system is designed as a full-stack web application that automates feedback for programming assignments submitted via GitHub Classroom. It consists of three core layers—Frontend, Backend, and External Integrations—each playing a distinct role in delivering real-time, AI-assisted insights to both students and teachers.

The Frontend, built with React, provides a user-friendly interface for authentication, repository selection, and feedback visualization. It communicates with the Backend via RESTful APIs.

The Backend, powered by Node.js and Express, handles user authentication through GitHub OAuth, fetches repository data via the GitHub API, and manages prompt generation and communication with AI services like OpenAI or DeepSeek. It also formats and returns feedback, summaries, and CSV exports to the frontend.

The system leverages external APIs—GitHub API for accessing student submissions and AI APIs for analyzing code and generating feedback—without requiring a dedicated database for the MVP.

Components are containerized using Docker to ensure portability and consistent development environments.

## Components

- **Frontend (React):**
  Built with React and Vite, the frontend provides the user interface for teachers. It includes components for login, repository selection, feedback display, and summary reports. Styled with Tailwind CSS, it communicates with the backend via a structured API service layer using axios.

- **Backend (Node.js/Express):** Handles authentication, repository reading, AI communication.
  Acts as the main server layer. It handles GitHub OAuth authentication, fetches repositories, processes requests, and orchestrates interactions between GitHub and AI services. Follows a modular structure with routes, controllers, and services.

- **AI Integration (OpenAI):** Generates feedback from student code.
  Uses AI APIs to analyze student code, generate insightful feedback, and suggest improvements. Prompts are crafted dynamically based on submission context and user roles (teacher).

- **GitHub API:** Used to access student repositories and commit history.
  Integrates GitHub REST APIs to authenticate users, list repositories, and fetch student assignment code and metadata (e.g., commits, diffs). It serves as the bridge between GitHub Classroom and the feedback system.

<!-- - **(Optional) Database:** If used, describe its purpose. -->

## Data Flow

1. Teacher logs in via GitHub OAuth.
2. Repositories are listed via GitHub API.
3. Code is fetched and passed to the AI with a prompt.
4. AI response is returned and shown in UI.
5. Feedback summary and CSV report are generated.

## Architecture Diagram

[![System Architecture](https://mermaid.ink/img/pako:eNp1VE1vm0AQ_SurPeRSPgw2YHOoZGMntdRKkZ320NLDGsaAArtoWdo4lv97Z4FEwXI5oBnevLdvZoAzTUQKNKSmacY8EfxYZGHMCSnZSbQqJCnLJMS8g4-l-JvkTCrytMaapj1kktU5uZeCK-Dpr5i-hTH9rVX6a-kg8n1LIlHVggNXzRh2EX5kGTT2Ds-EK3SK6PJxS_Yg_xQJkK_sBHIo0Sd9MLJiyXPvY4hGSittY_NSS2gacuOklfYRoX8pyhLkFahtPBTqS3sgy1bl5BPZQS3wxtJ3O0PpTPcjsVlFHoCDZEpcVXi6py25B0gP6JRseFZwGNf42s3-B0HHQqr_taz9MuTKwXsXj4Qi3fZa4DzksSiBmOTmkiL3uuzWDCM9hrSrMhO9zgasU1WOvHVLI6ZJdpv9E9GrM83POP0eWjl96g6p26dTcoeD0zd_AGY94PVp1NOWg0rkjkSjaZdi0R1C_bOkLHCyKBzTXKm6CW0bjTdWVqi8PVjo3gZu48ugYjpieB8YdcnUUcjKEjVwVnQsrWJrDjVoJouUhkq2YNAKZMV0Ss9aL6YqhwqXGmKYMvmsKRfk1Iz_FKJ6o0nRZjkNj6xsMGvrlClYF_jZser9qcTJgoxEyxUNF50EDc_0hYZOEFj-wvGnwcRZOO5kMTfoiYb-xPLnwSxw557rLDDyLgZ97U6dWPPAMyikBb6W3_qvv_sJXP4Bq800Cg?type=png)](https://mermaid.live/edit#pako:eNp1VE1vm0AQ_SurPeRSPgw2YHOoZGMntdRKkZ320NLDGsaAArtoWdo4lv97Z4FEwXI5oBnevLdvZoAzTUQKNKSmacY8EfxYZGHMCSnZSbQqJCnLJMS8g4-l-JvkTCrytMaapj1kktU5uZeCK-Dpr5i-hTH9rVX6a-kg8n1LIlHVggNXzRh2EX5kGTT2Ds-EK3SK6PJxS_Yg_xQJkK_sBHIo0Sd9MLJiyXPvY4hGSittY_NSS2gacuOklfYRoX8pyhLkFahtPBTqS3sgy1bl5BPZQS3wxtJ3O0PpTPcjsVlFHoCDZEpcVXi6py25B0gP6JRseFZwGNf42s3-B0HHQqr_taz9MuTKwXsXj4Qi3fZa4DzksSiBmOTmkiL3uuzWDCM9hrSrMhO9zgasU1WOvHVLI6ZJdpv9E9GrM83POP0eWjl96g6p26dTcoeD0zd_AGY94PVp1NOWg0rkjkSjaZdi0R1C_bOkLHCyKBzTXKm6CW0bjTdWVqi8PVjo3gZu48ugYjpieB8YdcnUUcjKEjVwVnQsrWJrDjVoJouUhkq2YNAKZMV0Ss9aL6YqhwqXGmKYMvmsKRfk1Iz_FKJ6o0nRZjkNj6xsMGvrlClYF_jZser9qcTJgoxEyxUNF50EDc_0hYZOEFj-wvGnwcRZOO5kMTfoiYb-xPLnwSxw557rLDDyLgZ97U6dWPPAMyikBb6W3_qvv_sJXP4Bq800Cg)
</file>

<file path="docs/EPICS.md">
# Epic Stories

Organize your features and user stories into broader epics.

## Epics and Related Stories

### 1. GitHub Integration

#### Goal: Enable secure and seamless access to student repositories using GitHub's API.

##### User stories:

- As a teacher, I want to authenticate with GitHub using OAuth so I can securely access student repositories.
- As a teacher, I want to view a list of student repositories so I can select which ones to analyze.
- As a teacher, I want to fetch code and metadata (e.g., last commit, repo owner) for each repository.

##### Suggestions:

- Support GitHub Classroom filtering/tagging to improve repo discovery.
- Cache repository metadata to reduce API usage and improve performance.

### 2. AI Feedback Engine

#### Goal: Provide automated, context-aware feedback on student code using LLMs.

##### User stories:

- As a teacher, I want to automatically generate prompts from student code so I can get feedback from the AI without manual formatting.
- As a system, I need to send these prompts to an AI engine (OpenAI or DeepSeek) and receive relevant, structured feedback.
- As a user, I want error handling and retry mechanisms in case of AI API failures.

##### Suggestions:

- Store past AI responses temporarily (in memory or local cache) to reduce duplicate requests during session.
- Define prompt templates that adapt to different code types or assignment goals.
- Consider feedback format standardization (e.g., issue type, severity, suggestion) for easier UI rendering and reporting.

### 3. Feedback UI

#### Goal: Display AI feedback clearly and helpfully for each student’s submission.

##### User stories:

- As a teacher, I want to view AI-generated feedback per student with syntax-highlighted code.
- As a teacher, I want common issues or coding patterns visually highlighted.
- As a user, I want the ability to toggle views between individual feedback and group insights.

##### Suggestions:

- Add collapsible sections and tags (e.g., logic, naming, performance) for better navigation.
- Consider future read-only student access UI for feedback transparency and self-learning.

### 4. Reporting Tools

#### Goal: Aggregate and export meaningful summaries of student feedback and performance.

##### User stories:

- As a teacher, I want to generate group-level summaries to identify widespread challenges.
- As a teacher, I want to export all feedback and points as a CSV file for grading or archival purposes.
- As a teacher, I want to see submission trends over time to evaluate class progress.

##### Suggestions:

- Include analytics like “top 5 common issues” or “average feedback score” per assignment.
- Allow optional filters (by student, assignment, or issue type) when generating reports.

### 5. Project Infrastructure

#### Goal: Support scalable development and deployment through reliable tooling.

##### User stories:

- As a developer, I want Docker containers for both frontend and backend to ensure consistency across environments.
- As a team, I want a basic CI/CD pipeline to run tests and deploy the app automatically (optional in MVP).
- As a developer, I want a documented deployment plan (e.g., Vercel for frontend, Render/Fly.io/Heroku for backend, optional in MVP).

##### Suggestions:

- Add environment variable management and secrets handling early on (e.g., .env, GitHub secrets).
- Plan for rate limits and retries when integrating with GitHub or AI APIs.
</file>

<file path="docs/PROJECT_PLAN.md">
# Project Plan

## Team Members and Roles

- [Helmi Griffiths](https://github.com/HelmiGr) - Full Stack developer
- [Sam Chou](https://github.com/FuzzyKala) - Full Stack developer
- [Ville Matilainen](https://github.com/vima20) - Full Stack developer

## Working Methods

- Daily check-ins on working day[11 AM]
- GitHub [Project board](https://github.com/orgs/Summer-project-25-AI-Feedback-system/projects/1) to manage tasks
- Time tracking in [Time Sheet](https://unioulu-my.sharepoint.com/:x:/r/personal/t3chsa01_students_oamk_fi/_layouts/15/Doc.aspx?sourcedoc=%7B7D663633-A44C-426A-B63D-24642BF47BFC%7D&file=worked_hours.xlsx&action=default&mobileredirect=true)

## Sprint Goals

### Sprint 1 (Setup & Planning)

- Set up development environment
- Create architecture and wireframes
- Agree on tech stack and workflow

### Sprint 2 (GitHub API & Prompting)

- Implement OAuth login
- Read student repositories
- Design and test initial AI prompts

### Sprint 3 (AI Feedback & UI Integration)

- Send code to AI and receive response
- Display feedback in frontend
- Refine prompt structure

### Sprint 4 (Reporting & Finalization)

- Generate summary reports
- Implement CSV export
- Final documentation and testing

## Risks and Mitigation

- AI API cost → Limit test requests
- Prompt quality → Peer review
- Time management → Weekly deadlines
</file>

<file path="docs/REQUIREMENTS.md">
# Functional Requirements

## User Roles

- **Teacher**: Authenticates via GitHub, views student submissions, reviews AI-generated feedback, generates summary reports, and exports data as CSV.
- **Student** (optional): May access personal feedback in future versions.

## MVP Requirements

- GitHub OAuth login for authentication
- List and fetch student repositories from GitHub Classroom
- Analyze code submissions using AI (OpenAI/DeepSeek)
- Display per-student feedback in the web UI
- Generate aggregated summary reports (e.g., most common issues, success rates)
- Export detailed feedback and grading data as a CSV file

## User Stories

- As a teacher, I want to authenticate via GitHub so I can access my students’ repositories.
- As a teacher, I want to view AI-generated feedback for each student submission to save review time.
- As a teacher, I want to download a CSV file with feedback and points to simplify grading.
- As a teacher, I want to see common errors and patterns across submissions to guide class instruction.

## Non-Functional Requirements

- The system must work reliably on modern browsers (Chrome, Firefox, Edge).
- API keys and secrets must be securely stored on the server and never exposed to the frontend.
- The response time from the AI feedback engine should be under 5 seconds to ensure a smooth user experience.
- The system should be containerized (via Docker) to support easy deployment and consistent development environments.
</file>

<file path="et --hard d8f68da">
[33md8f68da[m[33m ([m[1;36mHEAD -> [m[1;32mmain[m[33m)[m Paikalliset muutokset ennen mainin pĂ¤ivitystĂ¤
[33mcb8c730[m Added search bar component styling
[33m7174bbc[m Added start of list component
[33mc2ee9e9[m added filter button
[33m227cfcb[m fixed layout and make ui okay for mobile
</file>

<file path="README.md">
# AI-Feedback System

<p>
  
<img alt="React Badge" src="https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB" />

<img alt="Vite Badge" src="https://img.shields.io/badge/vite-%23646CFF.svg?style=for-the-badge&logo=vite&logoColor=white" />

<img alt="Nodejs Badge" src="https://img.shields.io/badge/Node%20js-3c873a?style=for-the-badge&logo=nodedotjs&logoColor=white" />

<img alt="TypeScript Badge" src="https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=typescript&logoColor=white" />

<img alt="Tailwind_CSS Badge" src="https://img.shields.io/badge/tailwindcss-%2338B2AC.svg?style=for-the-badge&logo=tailwind-css&logoColor=white" />

<img alt="chatGPT" src="https://img.shields.io/badge/chatGPT-0A0A0A?style=for-the-badge&logo=openai&logoColor=white" />

</p>

## :books: Table of the content

- [Introduction](#bulb-introduction)
- [Start](#rocket-start)
- [UI Diagram](#art-ui-diagram)
- [API document](#page_with_curl-api-document)
- [Deployment](#gear-deployment)
- [Video Demonstration](#video_camera-video-demonstration)
- [Contacts](#email-contacts)

## :bulb: Introduction

This system is designed as a full-stack web application that automates feedback for programming assignments submitted via GitHub Classroom. It consists of three core layers—Frontend, Backend, and External Integrations—each playing a distinct role in delivering real-time, AI-assisted insights to both students and teachers.

The Frontend, built with React, provides a user-friendly interface for authentication, repository selection, and feedback visualization. It communicates with the Backend via RESTful APIs.

The Backend, powered by Node.js and Express, handles user authentication through GitHub OAuth, fetches repository data via the GitHub API, and manages prompt generation and communication with AI services like OpenAI or DeepSeek. It also formats and returns feedback, summaries, and CSV exports to the frontend.

The system leverages external APIs—GitHub API for accessing student submissions and AI APIs for analyzing code and generating feedback—without requiring a dedicated database for the MVP.

Components are containerized using Docker to ensure portability and consistent development environments.

## :rocket: Start

TBD

## :art: UI Diagram

TBD

## :video_camera: Video Demonstration

TBD

## :page_with_curl: API document

TBD

## :gear: Deployment

TBD

## :email: Contacts

- [Helmi Griffiths](https://github.com/HelmiGr) - Full Stack developer
- [Sam Chou](https://github.com/FuzzyKala) - Full Stack developer
- [Ville Matilainen](https://github.com/vima20) - Full Stack developer
</file>

<file path="repomix-test.ts">
// repomix-test.ts
// Test

import { RepomixFetcher } from './repomix';

// Skip main function in repomix.ts
process.argv = [process.argv[0], process.argv[1], 'dummy-arg']; 

async function runTest() {
  try {
    // Create fetcher instance
    const fetcher = new RepomixFetcher('output-test');

    const repoOptions = {
      remoteUrl: 'https://github.com/Summer-project-25-AI-Feedback-system/AI-Feedback-System.git', // <-- Your desired GitHub repository URL here
      style: 'xml' as const,
      outputFile: 'output/AI-Feedback-System.xml',
      verbose: true,
      ignore: 'node_modules/',
    };

    console.log('Starting repository fetch...');
    const xmlResult = await fetcher.fetchRepositoryAsXml(repoOptions);
    console.log('Repository fetched and saved successfully!');
    console.log('XML result:', xmlResult);
  } catch (error) {
    console.error('Error fetching repository:', error);
  }
}

runTest();
</file>

<file path="repomix.js">
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var util_1 = require("util");
var fs = require("fs/promises");
var path = require("path");
// Muunna exec-funktio Promise-pohjaiseksi
var execPromise = (0, util_1.promisify)(child_process_1.exec);
// Kovakoodattu GitHub-osoite
var GITHUB_URL = 'https://github.com/Summer-project-25-AI-Feedback-system/AI-Feedback-System.git';
/**
 * Poistaa GitHub-repositorion nimen URL:sta
 * @param url GitHub-repositorion URL
 * @returns Repositorion nimi
 */
function getRepoNameFromUrl(url) {
    // Poista mahdollinen .git-pääte
    var cleanUrl = url.replace(/\.git$/, '');
    // Hae viimeinen osa URL:sta (repositorion nimi)
    var repoName = cleanUrl.split('/').pop() || 'unknown-repo';
    return repoName;
}
var RepomixFetcher = /** @class */ (function () {
    function RepomixFetcher(outputDir) {
        if (outputDir === void 0) { outputDir = 'output'; }
        this.outputDir = path.resolve(outputDir);
        this.tempDir = path.join(process.cwd(), "repomix-temp-".concat(Date.now()));
    }
    RepomixFetcher.prototype.ensureDirectories = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        return [4 /*yield*/, fs.access(this.outputDir, fs.constants.W_OK).catch(function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, fs.mkdir(this.outputDir, { recursive: true })];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, fs.rm(this.tempDir, { recursive: true, force: true }).catch(function () { })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, fs.mkdir(this.tempDir, { recursive: true })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, fs.access(this.tempDir, fs.constants.W_OK)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _a.sent();
                        throw new Error("Failed to set up directories: ".concat(error_1 instanceof Error ? error_1.message : error_1));
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    RepomixFetcher.prototype.fetchRepositoryAsXml = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var outputFileName, actualOutputFile, tempOutputFile, command, execOptions, _a, stdout, stderr, error_2, _b;
            var _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.ensureDirectories()];
                    case 1:
                        _e.sent();
                        outputFileName = (_c = options.outputFile) !== null && _c !== void 0 ? _c : 'repomix-output.xml';
                        actualOutputFile = path.join(this.outputDir, outputFileName).replace(/\\/g, '/');
                        tempOutputFile = path.join(this.tempDir, outputFileName).replace(/\\/g, '/');
                        command = "repomix --remote ".concat(options.remoteUrl, " --style ").concat((_d = options.style) !== null && _d !== void 0 ? _d : 'xml', " --output \"").concat(outputFileName, "\"");
                        if (options.ignore)
                            command += " --ignore \"".concat(options.ignore, "\"");
                        if (options.include)
                            command += " --include \"".concat(options.include, "\"");
                        if (options.verbose)
                            command += " --verbose";
                        execOptions = {
                            env: __assign(__assign({}, process.env), { PYTHONIOENCODING: 'utf-8', TMPDIR: this.tempDir, TEMP: this.tempDir, TMP: this.tempDir }),
                            cwd: this.tempDir,
                        };
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 7, 14, 16]);
                        return [4 /*yield*/, execPromise(command, execOptions)];
                    case 3:
                        _a = _e.sent(), stdout = _a.stdout, stderr = _a.stderr;
                        if (stderr)
                            console.warn("Repomix stderr: ".concat(stderr));
                        if (stdout)
                            console.log("Repomix stdout: ".concat(stdout));
                        return [4 /*yield*/, fs.access(tempOutputFile, fs.constants.R_OK)];
                    case 4:
                        _e.sent();
                        return [4 /*yield*/, fs.rename(tempOutputFile, actualOutputFile)];
                    case 5:
                        _e.sent();
                        return [4 /*yield*/, fs.readFile(actualOutputFile, 'utf-8')];
                    case 6: return [2 /*return*/, _e.sent()];
                    case 7:
                        error_2 = _e.sent();
                        _e.label = 8;
                    case 8:
                        _e.trys.push([8, 12, , 13]);
                        return [4 /*yield*/, fs.access(tempOutputFile, fs.constants.R_OK)];
                    case 9:
                        _e.sent();
                        return [4 /*yield*/, fs.rename(tempOutputFile, actualOutputFile)];
                    case 10:
                        _e.sent();
                        return [4 /*yield*/, fs.readFile(actualOutputFile, 'utf-8')];
                    case 11: return [2 /*return*/, _e.sent()];
                    case 12:
                        _b = _e.sent();
                        return [3 /*break*/, 13];
                    case 13: throw new Error("Failed to fetch repository with Repomix: ".concat(error_2.message));
                    case 14: return [4 /*yield*/, fs.rm(this.tempDir, { recursive: true, force: true }).catch(function () { })];
                    case 15:
                        _e.sent();
                        return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return RepomixFetcher;
}());
exports.default = RepomixFetcher;
</file>

<file path="repomix.ts">
import { exec } from 'child_process';
import { promisify } from 'util';
import * as fs from 'fs/promises';
import * as path from 'path';

// Convert exec function to Promise-based
const execPromise = promisify(exec);

/**
 * Extracts repository name from GitHub URL
 * @param url GitHub repository URL
 * @returns Repository name
 */
function getRepoNameFromUrl(url: string): string {
  return url.replace(/\.git$/, '').split('/').pop() || 'unknown-repo';
}

/**
 * Repomix command options
 */
interface RepomixOptions {
  remoteUrl: string;        // GitHub repository URL
  outputFile?: string;      // Output file name (default: repomix-output.xml)
  style?: 'xml' | 'markdown' | 'plain';  // Output format
  ignore?: string;          // Files/directories to ignore (comma-separated)
  include?: string;         // Files/directories to include (comma-separated)
  verbose?: boolean;        // Detailed output
}

/**
 * Repomix command line tool handling
 */
export class RepomixFetcher {
  constructor(private outputDir: string = 'output') {}

  private async ensureDir(dir: string) {
    await fs.mkdir(dir, { recursive: true }).catch(() => {});
  }

  /**
   * Fetches GitHub repository content in XML format
   */
  async fetchRepositoryAsXml(options: RepomixOptions): Promise<string> {
    await this.ensureDir(this.outputDir);

    const outputFileName = options.outputFile ?? 'repomix-output.xml';
    const outputFile = path.join(this.outputDir, outputFileName);

    let command = `repomix --remote ${options.remoteUrl} --style ${options.style ?? 'xml'} --output "${outputFileName}"`;
    if (options.ignore) command += ` --ignore "${options.ignore}"`;
    if (options.include) command += ` --include "${options.include}"`;
    if (options.verbose) command += ` --verbose`;

    await execPromise(command, {
      env: { ...process.env, PYTHONIOENCODING: 'utf-8' },
      cwd: this.outputDir,
    });

    return await fs.readFile(outputFile, 'utf-8');
  }
}

/**
 * Main program
 */
async function main() {
  const args = process.argv.slice(2);
  if (args.length === 0) {
    console.error('Usage: npm start <github-url>');
    process.exit(1);
  }

  const githubUrl = args[0];
  const repoName = getRepoNameFromUrl(githubUrl);
  const fetcher = new RepomixFetcher();

  const xml = await fetcher.fetchRepositoryAsXml({
    remoteUrl: githubUrl,
    style: 'xml',
    outputFile: `${repoName}.xml`,
    ignore: 'node_modules/*,dist/*',
    verbose: true,
  });

  console.log('Repository fetched as XML.');
  console.log(`XML file saved to: output/${repoName}.xml`);
}

// Execute main program
main();
</file>

<file path="server/.dockerignore">
# Ignore node_modules (since we install dependencies in Docker)
node_modules/

# Ignore logs and temp files
*.log
*.tmp
*.swp

# Ignore environment files (make sure not to include .env files in your image)
.env
.env.* 

# Ignore Git-related files and directories
.git/
.gitignore

# Ignore Docker files (you don't want to copy the Dockerfile itself)
Dockerfile
.dockerignore

# Ignore package manager logs (npm-debug.log, yarn-error.log)
npm-debug.log*
yarn-error.log*

# Ignore build and dist directories (as the image should be built within Docker)
dist/
build/

# Ignore any IDE specific files (like VS Code, JetBrains, etc.)
.vscode/
.idea/

# Ignore other temporary files
*.bak
*.orig

.env*
.flaskenv*
!.env.project
!.env.vault
</file>

<file path="server/controllers/authController.ts">
import { Request, Response } from "express";
import dotenv from "dotenv";
dotenv.config();

export const githubCallback = (req: Request, res: Response) => {
  // console.log("Authenticated user:", req.user);
  res.redirect(`${process.env.FRONTEND_ORIGIN}/orgs`);
};

export const getCurrentUser = (req: Request, res: Response) => {
  res.json({ user: req.user });
};

export const logout = (req: Request, res: Response) => {
  req.logout((err) => {
    if (err) {
      return res.status(500).json({ error: "Logout failed" });
    }
    req.session.destroy(() => {
      res.clearCookie("connect.sid");
      res.status(200).json({ message: "Logged out successfully" });
    });
  });
};
</file>

<file path="server/controllers/githubController.ts">
import { Request, Response } from "express";
import { extractAssignmentName } from "../utils/githubUtils";
import {
  getStudentReposForAssignment,
  getAssignments,
  getOrganizations,
  getFileContents,
  getRepositoryFileTree,
} from "../services/github/githubService";

export async function handleGetOrganizations(
  req: Request,
  res: Response
): Promise<void> {
  try {
    const orgs = await getOrganizations();
    res.json(orgs);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch organizations" });
  }
}

export async function handleGetAssignments(
  req: Request,
  res: Response
): Promise<void> {
  const org = req.params.orgName;

  if (!org) {
    res.status(400).json({ error: "Organization login not provided" });
    return;
  }
  try {
    const assignmentInfos = await getAssignments(org);
    res.json(assignmentInfos);
  } catch (error: any) {
    console.error("Error fetching assignments:", error.message);
    res.status(500).json({ error: "Failed to fetch assignments" });
  }
}

export async function handleGetStudentReposForAssignment(
  req: Request,
  res: Response
): Promise<void> {
  const org = req.params.orgName;
  const assignmentPrefix = req.params.assignmentName;

  if (!org) {
    res.status(400).json({ error: "Missing organization or assignment name" });
    return;
  }

  try {
    const repos = await getStudentReposForAssignment(org, assignmentPrefix);
    res.json(repos);
  } catch (error) {
    console.error("Failed to fetch student repos:", error);
    res.status(500).json({ error: "Failed to fetch student repos" });
  }
}

// export async function handleGetFileContents(
//   req: Request,
//   res: Response
// ): Promise<void> {
//   const { owner, repo, files } = req.body;

//   if (!owner || !repo || !Array.isArray(files)) {
//     res
//       .status(400)
//       .json({ error: "Missing required parameters: owner, repo, files[]" });
//     return;
//   }

//   try {
//     const contents = await getFileContents(owner, repo, files);
//     res.json(contents);
//   } catch (error) {
//     console.error("Failed to fetch file contents:", error);
//     res.status(500).json({ error: "Failed to fetch file contents" });
//   }
// }

// export async function handleGetRepoTree(
//   req: Request,
//   res: Response
// ): Promise<void> {
//   const { owner, repo } = req.query;

//   if (!owner || !repo) {
//     res.status(400).json({ error: "Missing required parameters" });
//     return;
//   }

//   try {
//     const tree = await getRepositoryFileTree(owner as string, repo as string);
//     res.json(tree);
//   } catch (error) {
//     console.error("Failed to fetch repo tree:", error);
//     res.status(500).json({ error: "Failed to fetch repository tree" });
//   }
// }

export async function handleRepoFilesWithTree(
  req: Request,
  res: Response
): Promise<void> {
  const { owner, repo } = req.query;

  if (!owner || !repo) {
    res.status(400).json({ error: "Missing required parameters: owner, repo" });
    return;
  }

  try {
    const tree = await getRepositoryFileTree(owner as string, repo as string);
    const filteredTree = tree.filter(
      (path): path is string => path !== undefined
    );
    const contents = await getFileContents(
      owner as string,
      repo as string,
      filteredTree
    );
    res.json(contents);
  } catch (error) {
    console.error("Failed to fetch tree and contents:", error);
    res.status(500).json({ error: "Failed to fetch files" });
  }
}

export async function handleGetAllOrganizationData(
  req: Request,
  res: Response
): Promise<void> {
  const org = req.query.org as string;
  if (!org) {
    res.status(400).json({ error: "Missing organization parameter" });
    return;
  }
  try {
    const repos = await getRepos(org); 
    const assignmentSet = new Set<string>();
    const studentMap = new Map<string, Record<string, null>>(); 
    for (const repo of repos) {
      const assignment = extractAssignmentName(repo.name); 
      assignmentSet.add(assignment);
      const student = repo.collaborators?.[0]?.login || "Unknown Student";
      // TODO: get grade here later from the db (as given by the AI)
      if (!studentMap.has(student)) {
        studentMap.set(student, {});
      }
      studentMap.get(student)![assignment] = null;
    }
    const responseData = {
      org,
      assignments: Array.from(assignmentSet),
      submissions: Array.from(studentMap.entries()).map(([student, grades]) => ({
        student,
        grades, // all values null for now
      })),
    };
    res.json(responseData);
  } catch (error) {
    console.error("Failed to get all data:", error);
    res.status(500).json({ error: "Failed to generate all data" });
  }
}
</file>

<file path="server/Dockerfile">
# 1. Base image
FROM node:22-alpine
LABEL org.opencontainers.image.source="https://github.com/Summer-project-25-AI-Feedback-system/AFS"

# 2. Set working directory
WORKDIR /app

# 3. Copy package files and install deps
COPY package*.json ./
RUN npm install

# 4. Copy the rest of the server files
COPY . .

# 5. Build TypeScript
RUN npm run build

# 6. Expose the port (match .env)
EXPOSE 5000

# 7. Start the server
CMD ["node", "dist/index.js"]
</file>

<file path="server/index.ts">
import express from "express";
import session from "express-session";
import passport from "./utils/passport";
import cors from "cors";
import dotenv from "dotenv";
import authRoutes from "./routes/authRoutes";
import githubRoutes from "./routes/githubRoutes";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(
  cors({
    origin: process.env.FRONTEND_ORIGIN,
    credentials: true,
  })
);

app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Set up session
app.use(
  session({
    secret: process.env.SESSION_SECRET || "secret",
    resave: false,
    saveUninitialized: true,
    cookie: {
      httpOnly: true,
      secure: false, // Set to true only in production (HTTPS)
      sameSite: "lax", // or "none" if secure: true for cross-origin
    },
  })
);

// Initialize passport
app.use(passport.initialize());
app.use(passport.session());

// test message
app.get("/api/message", (req, res) => {
  res.json({ message: "Test message from backend!" });
});

// Routes
app.use("/api/auth", authRoutes);
app.use("/api/github", githubRoutes);

// Error handling
app.use(
  (
    err: any,
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) => {
    console.error(err.stack);
    res.status(500).json({ error: "Something went wrong!" });
  }
);

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
</file>

<file path="server/middlewares/isAuthenticated.ts">
import { Request, Response, NextFunction } from "express";

export const isAuthenticated = (
  req: Request,
  res: Response,
  next: NextFunction
): void => {
  if (req.isAuthenticated && req.isAuthenticated()) {
    return next();
  }
  res.status(401).json({ error: "Unauthorized" });
};
</file>

<file path="server/package.json">
{
  "name": "ai-feedback-backend",
  "version": "1.0.0",
  "main": "dist/index.ts",
  "scripts": {
    "build": "tsc",
    "start": "dotenv -e .env.production -- ts-node-dev --respawn index.ts",
    "dev": "dotenv -e .env -- ts-node-dev --respawn index.ts"
  },
  "dependencies": {
    "@octokit/rest": "^21.1.1",
    "@types/react": "^19.1.4",
    "axios": "^1.9.0",
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "express-session": "^1.18.1",
    "passport": "^0.7.0",
    "passport-github2": "^0.1.12",
    "react": "^19.1.0"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.1",
    "@types/express-session": "^1.18.1",
    "@types/node": "^22.15.12",
    "@types/passport": "^1.0.17",
    "@types/passport-github2": "^1.2.9",
    "dotenv-cli": "^8.0.0",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.8.3",
    "vite-tsconfig-paths": "^5.1.4"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}
</file>

<file path="server/routes/authRoutes.ts">
import { Router } from "express";
import passport from "../utils/passport";
import dotenv from "dotenv";
import {
  githubCallback,
  getCurrentUser,
  logout,
} from "../controllers/authController";

import { isAuthenticated } from "../middlewares/isAuthenticated";

dotenv.config();
const router = Router();

router.get(
  "/login",
  passport.authenticate("github", { scope: ["user:email"] })
);

router.get(
  "/callback",
  passport.authenticate("github", { failureRedirect: "/login" }),
  githubCallback
);
router.get("/getCurrentUser", isAuthenticated, getCurrentUser);
router.get("/logout", isAuthenticated, logout);

export default router;
</file>

<file path="server/routes/githubRoutes.ts">
import { Router } from "express";
import {
  handleGetOrganizations,
  handleGetAssignments,
  handleGetStudentReposForAssignment,
  // handleGetFileContents,
  // handleGetRepoTree,
  handleRepoFilesWithTree,
  handleGetAllOrganizationData
} from "../controllers/githubController";
import { isAuthenticated } from "../middlewares/isAuthenticated";

const router = Router();

router.use(isAuthenticated);

router.get("/orgs", handleGetOrganizations);
router.get("/orgs/:orgName/assignments", handleGetAssignments);
router.get(
  "/orgs/:orgName/assignments/:assignmentName/repos",
  handleGetStudentReposForAssignment
);
// router.post("/repo-files", handleGetFileContents);
// router.get("/repo-tree", handleGetRepoTree);
// router.get("/repo-tree-and-files", handleRepoFilesWithTree);
router.get("/org-report", handleGetAllOrganizationData);

export default router;
</file>

<file path="server/services/github/githubService.ts">
import { promises } from "dns";
import { octokit } from "./octokitClient";
import { OrgInfo, AssignmentInfo, RepoInfo } from "@shared/githubInterfaces";

export async function getOrganizations(): Promise<OrgInfo[]> {
  const response = await octokit.rest.orgs.listForAuthenticatedUser();
  return response.data.map(
    (org): OrgInfo => ({
      name: org.login,
      description: org.description,
      avatarUrl: org.avatar_url,
    })
  );
}

export async function getAssignments(org: string): Promise<AssignmentInfo[]> {
  const repos = await octokit.rest.repos.listForOrg({
    org: org,
    type: "all",
    per_page: 100,
  });

  const assignmentMap = new Map<string, AssignmentInfo>();

  repos.data.forEach((repo) => {
    const baseName = repo.name.replace(/-[a-z0-9]+$/i, "");
    const updatedAt = repo.updated_at ?? undefined;

    const assignment = assignmentMap.get(baseName);

    if (!assignment) {
      assignmentMap.set(baseName, {
        name: baseName,
        submissionCount: 1,
        lastUpdated: updatedAt,
      });
    } else {
      assignment.submissionCount++;
      if (
        updatedAt &&
        (!assignment.lastUpdated ||
          new Date(updatedAt) > new Date(assignment.lastUpdated))
      ) {
        assignment.lastUpdated = updatedAt;
      }
    }
  });

  return Array.from(assignmentMap.values());
}

export async function getStudentReposForAssignment(
  org: string,
  assignmentPrefix?: string
): Promise<RepoInfo[]> {
  console.log(
    `Searching for repositories ${
      assignmentPrefix ? `with prefix '${assignmentPrefix}' ` : ""
    }under organization ${org}...`
  );
  const repositories: any[] = [];
  const iterator = await buildSearchQuery(org, assignmentPrefix);

  for await (const { data: reposPage } of iterator) {
    const relevantRepos = reposPage.filter(
      (repo) =>
        !assignmentPrefix ||
        repo.name.toLowerCase().includes(assignmentPrefix.toLowerCase())
    );

    const detailPromises = relevantRepos.map((repo) =>
      extractRepositoryDetails(org, repo)
    );

    const detailResults = await Promise.allSettled(detailPromises);

    detailResults.forEach((result) => {
      if (result.status === "fulfilled") {
        repositories.push(result.value);
      } else {
        console.warn("Repo detail fetch failed:", result.reason);
      }
    });
  }
  console.log(`Found ${repositories.length} matching repositories.`);
  return repositories;
}

async function buildSearchQuery(org: string, assignmentPrefix?: string) {
  const query =
    `fork:true org:${org}` +
    (assignmentPrefix ? ` ${assignmentPrefix} in:name` : "");

  return octokit.paginate.iterator(octokit.rest.search.repos, {
    q: query,
    per_page: 100,
  });
}

async function extractRepositoryDetails(org: string, repo: any) {
  const lastCommit = await octokit.rest.repos.getCommit({
    owner: org,
    repo: repo.name,
    ref: repo.default_branch,
  });

  return {
    id: repo.node_id,
    name: repo.name,
    owner: repo.owner?.login || "unknown",
    avatarUrl: repo.owner?.avatar_url ?? null,
    url: repo.html_url,
    description: repo.description,
    defaultBranch: repo.default_branch,
    createdAt: repo.created_at,
    updatedAt: repo.updated_at,
    lastPush: repo.pushed_at,
    lastCommitMessage: lastCommit.data.commit.message,
    lastCommitDate: lastCommit.data.commit.committer?.date,
    collaborators: await getRepoCollaborators(org, repo.name),
  };
}

async function getRepoCollaborators(org: string, repo: string) {
  try {
    const response = await octokit.rest.repos.listCollaborators({
      owner: org,
      repo,
      affiliation: "direct",
    });

    return response.data.map((user) => ({
      id: user.id,
      name: user.login,
      avatarUrl: user.avatar_url,
      htmlUrl: user.html_url,
      permissions: user.permissions,
    }));
  } catch (error: any) {
    console.error(`Error fetching collaborators for ${repo}:`, error.message);
    return [];
  }
}

export async function getFileContents(
  owner: string,
  repo: string,
  filePaths: string[]
): Promise<Record<string, string | null>> {
  const contents: Record<string, string | null> = {};
  console.log(`\nFetching files from repository ${owner}/${repo}:`);

  for (const filePath of filePaths) {
    try {
      const response = await octokit.rest.repos.getContent({
        owner,
        repo,
        path: filePath,
      });

      if (
        response.data &&
        !Array.isArray(response.data) &&
        response.data.type === "file" &&
        response.data.content
      ) {
        const content = Buffer.from(response.data.content, "base64").toString(
          "utf-8"
        );
        contents[filePath] = content;
        console.log(` - ${filePath}: Downloaded (${content.length} bytes)`);
      } else {
        console.log(
          ` - ${filePath}: Path found, but it's not a file or content is missing.`
        );
        contents[filePath] = null;
      }
    } catch (error: any) {
      if (error.status === 404) {
        console.log(` - ${filePath}: Not found.`);
      } else {
        console.error(
          ` - Error fetching file ${filePath} from ${owner}/${repo}: ${error.status} ${error.message}`
        );
      }
      contents[filePath] = null;
    }
  }

  return contents;
}

export async function getRepositoryFileTree(owner: string, repo: string) {
  const { data: refData } = await octokit.rest.git.getRef({
    owner,
    repo,
    ref: "heads/main", // or use repo.default_branch if dynamic
  });
  console.log();

  const { data: treeData } = await octokit.rest.git.getTree({
    owner,
    repo,
    tree_sha: refData.object.sha,
    recursive: "true",
  });
  console.log(treeData);

  return treeData.tree
    .filter((item) => item.type === "blob") // Only files
    .map((item) => item.path);
}
</file>

<file path="server/services/github/octokitClient.ts">
import { Octokit } from "@octokit/rest";
import dotenv from "dotenv";

dotenv.config();

export const octokit = new Octokit({
  auth: process.env.GITHUB_PAT,
});
</file>

<file path="server/tsconfig.json">
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "target": "ES2020", // Modern JS features
    "module": "CommonJS",
    "moduleResolution": "node", // Node-style resolution
    "rootDir": "../", // Source root
    "outDir": "./dist", // Output folder
    "esModuleInterop": true, // Support commonjs modules
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@shared/*": ["../shared/*"]
    }
  },
  "include": ["./"], // Include all files in this folder
  "exclude": ["node_modules", "dist"] // Avoid compiling node_modules and output
}
</file>

<file path="server/utils/githubUtils.ts">
export function extractAssignmentName(repoName: string): string {
  // Example: "assignment1-alice" => "assignment1"
  // TODO: modify or change this later if we need something different
  return repoName.replace(/-[a-zA-Z0-9]+$/, "");
}
</file>

<file path="server/utils/passport.ts">
import passport from "passport";
import { Strategy as GitHubStrategy, Profile } from "passport-github2";
import dotenv from "dotenv";

dotenv.config();

// GitHub OAuth configuration
passport.use(
  new GitHubStrategy(
    {
      clientID: process.env.GITHUB_CLIENT_ID as string,
      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
      callbackURL: process.env.GITHUB_CALLBACK_URL as string,
    },
    (
      accessToken: string,
      refreshToken: string,
      profile: Profile,
      done: (error: any, user?: Express.User | false | null) => void
    ) => {
      return done(null, profile);
    }
  )
);

// Serialize user to store user in session
passport.serializeUser((user, done) => {
  done(null, user);
});

// Deserialize user from session
passport.deserializeUser((user, done) => {
  done(null, user as Express.User);
});

export default passport;
</file>

<file path="shared/githubInterfaces.ts">
export interface OrgInfo {
  name: string;
  description: string | null;
  avatarUrl: string;
}

export interface AssignmentInfo {
  name: string;
  submissionCount: number;
  lastUpdated?: string;
}

export interface RepoInfo {
  id: string;
  name: string;
  owner: string;
  avatarUrl: string;
  url: string;
  description?: string;
  defaultBranch: string;
  createdAt: string;
  updatedAt: string;
  lastPush: string;
  lastCommitMessage: string;
  lastCommitDate: string;
  collaborators: Collaborator[];
}

export interface Collaborator {
  id: number;
  name: string;
  avatarUrl: string;
  htmlUrl: string;
  permissions: {
    admin: boolean;
    maintain: boolean;
    push: boolean;
    triage: boolean;
    pull: boolean;
  };
}

export interface User {
  id: string;
  username: string;
  displayName?: string;
  profileUrl?: string;
  photos?: { value: string }[];
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist"
  },
  "include": ["*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
